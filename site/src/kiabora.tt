<!DOCTYPE html>
<html>
  [%- PROCESS config.tt -%]
  [%- title = "Kiabora" -%]  
  [%- INCLUDE header.tt -%]
  
  <body>

    <!-- HEADER -->
    <div id="header_wrap" class="outer">
      <header class="inner">
          <h1 id="project_title">[% title %]</h1>
      </header>
      [%- INCLUDE nav.tt -%]
    </div>

    [%- INCLUDE downloads_sub_menu.tt -%]

    <!-- MAIN CONTENT -->
    <div id="main_content_wrap" class="outer">
      <section id="main_content" class="inner">

        <p>This tool is dedicated to the analysis of a set of
        existential rules. It can check if this set belongs to a known
        <strong>decidable</strong> class of rules,
        either directly or by means of its
        <strong>Graph of Rule Dependencies (GRD)</strong>.
        Kiabora analyzes the
        properties of the strongly connected components in the GRD,
        which allows to determine properties of the rule set with
        respect to decidability as well as the kind of paradigm
        (forward or backward chaining) ensuring decidability.</p>

		<p>
		  The analysis is divided into two steps. The first step 
		  <i>determines</i> the rule classes of the whole base, 
		  or of part of it (a strongly connected component of the graph of rule dependencies for instance), while the second step
		  <i>combines</i> these classes in order to find a way of ensuring a finite query answering process. 
		</p>

		<a name="determining"></a>
        <h4>Determining rule classes</h4>
		<p>
		  Known rule classes are partially ordered by specialization (a child is a specialization of its parents).
		  If a test returns <em>success</em> for a rule class, 
		  all of its ancestors will be noted as successful
		  without performing any other test.
		</p>
		<p>
		  Only the rule classes selected by the user are used by the analizer, 
		  therefore the second analysis step may fail even if the
		  tool would be able to find a solution by using other rule classes. 
		</p>
		<p>Furthermore, the different tests may be performed on each rule independently
		  or on a set of rules. Indeed, the analyzer first checks all unit properties on
		  each rule, then it computes the <a href="./ruleclasses.html#grd">
			Graph of Rule Dependencies</a> and
		  checks all global properties on each strongly connected component of the GRD.
		  Finally, it checks all global properties on the full base.
		</p><p>
		  For further information about rule classes, you can go to <a href="./ruleclasses.html">this page</a> where each
		  rule class is shortly described.
		</p>

		<a name="combining"></a>
        <h4>Combining rule classes</h4>
		<p>Provided that each strongly connected component of the GRD belongs to a known decidable class, 
		  the second analysis step consists of combining <i>abstract</i> rule classes
		  (i.e., <i>Finite Expansion Set</i>, <i>Finite Unification Set</i> and <i>(Greedy) Bounded
			Treewidth Set</i>) to which the strongly connected components belong, in
		  order to find a way of ensuring finiteness of the query process. 
		</p>
		<p>
		  <!-- When using multiple algorithms, the <i>forward chaining</i> must be processed
			   before any <i>backward chaining</i>.-->
		  A sufficient property for the base to be <i>decidable</i> is that no rule
		  that will be processed as <i>fes</i>  depends on a
		  <i>fus</i> or <i>bts</i> rule, and no  rule that will be processed as <i>bts</i> depends on a <i>fus</i>  rule.
		  This property is noted as: 
		  <em>FES<sup>*</sup> |&gt; BTS |&gt; FUS<sup>*</sup></em>
		  <br>
		  where <em>A |&gt; B</em> is the notation for "A precedes B", i.e.,
		  there must be no edge from a rule in B to a rule in A.
		  We can see that a <i>bts</i> component must not be followed by another
		  <i>bts</i>.
		</p>
      
        
        <h2>Associated publications</h2>
        
            <p>See <a href="./publications#KIABORA_RR2013">KIABORA: An Analyzer of Existential Rule Bases (RR 2013)</a>.</p>
        
        <h2>Getting started</h2>

        <p>Download <a href="./dl/kiabora-1.0.beta2.jar">kiabora</a></p>

        <p>
          Full analyse of your ontology: <br/>
          <code>java -jar kiabora-*.jar -c -b -g -p '*' -P -r -R -s -G -S -u < ontology.dlp</code>
        </p>
        <p>
          To get more details about options: <br/>
          <code>java -jar kiabora-*.jar --help</code>
        </p>
         
        <p>
        For an example, see <a href='./kiabora-example.html'>this page</a>.
        </p>
      </section>
    </div>

    [%- INCLUDE footer.tt -%]

  </body>
</html>

